package ed25519

import (
	"bytes"
	"encoding/hex"
	"testing"
)

var (
	// Signatures in this test are generated by the private/public keypair
	// from the 'keys_test.go' file
	sigEd = []byte{
		0x67, 0xf8, 0x3a, 0xd4, 0x60, 0x55, 0xa7, 0x8d,
		0x56, 0x3c, 0xee, 0x03, 0x5c, 0x6d, 0x0f, 0x3e,
		0x0f, 0xa6, 0xb3, 0x9e, 0x41, 0x2e, 0xcd, 0x84,
		0x46, 0x31, 0x52, 0xba, 0xa6, 0x4a, 0x6d, 0xec,

		0x03, 0x9b, 0xa1, 0x02, 0x77, 0xdb, 0xd1, 0x34,
		0x16, 0x3a, 0x35, 0x02, 0x52, 0xe0, 0x74, 0x7e,
		0xad, 0xbe, 0xd3, 0x2f, 0x07, 0x61, 0x1c, 0xee,
		0x3b, 0x4c, 0x00, 0x2c, 0x52, 0x35, 0x21, 0xf5,
	}

	msgEd = []byte{
		0x00, 0x00, 0x00, 0x22,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x05, 0x70, 0xad, 0xe2, 0x8b, 0x6b, 0xa5,
		0x00, 0x00, 0x00, 0x0e,
		0x74, 0x63, 0x70, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0xac, 0x11, 0x00, 0x05,
		0x08, 0x26,
	}

	sigEc = []byte{
		0x0a, 0xec, 0xb2, 0x19, 0x79, 0xea, 0x1c, 0x28,
		0xe4, 0x42, 0x67, 0xeb, 0x0a, 0x8b, 0xe0, 0x1b,
		0x44, 0xf1, 0x40, 0xa5, 0xba, 0x62, 0xc2, 0x3b,
		0x47, 0x48, 0x66, 0x3a, 0xf0, 0x6e, 0x57, 0x30,

		0x01, 0x90, 0x66, 0xc6, 0xb0, 0x1c, 0x30, 0xdc,
		0xc2, 0x8d, 0xd9, 0xbd, 0x52, 0xc0, 0xf1, 0x4a,
		0x4b, 0xff, 0x80, 0x72, 0x33, 0x51, 0x10, 0xf7,
		0x92, 0x72, 0x8e, 0x91, 0x6c, 0x87, 0xbe, 0xda,
	}

	msgEc = []byte{
		0x49, 0x20, 0x83, 0x5b, 0x92, 0xb4, 0x7d, 0x14,
		0x4e, 0x88, 0x96, 0x48, 0xa5, 0xba, 0x53, 0x39,
		0x42, 0xa7, 0x85, 0xb0, 0x66, 0x91, 0x43, 0x3f,
		0x2c, 0x59, 0x85, 0x0d, 0x9f, 0x3e, 0xb0, 0x08,
	}
)

func TestEdDSA(t *testing.T) {
	sigT, err := prv.EdSign(msgEd)
	if err != nil {
		t.Fatal(err)
	}
	sigX := sigT.Bytes()
	//	if testing.Verbose() {
	//		fmt.Printf("SIG=%s\n", hex.EncodeToString(sigX))
	//	}
	// signature is deterministic, so we can check the computed signature
	if bytes.Compare(sigX, sigEd) != 0 {
		t.Logf("SIG(computed): %s\n", hex.EncodeToString(sigX))
		t.Logf("SIG(expected): %s\n", hex.EncodeToString(sigEd))
		t.Fatal("Signature mismatch")
	}
	rc, err := pub.EdVerify(msgEd, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed")
	}

	// test failure
	sigX[23] ^= 0x56
	sigT2, err := NewEdSignatureFromBytes(sigX)
	if err != nil {
		t.Fatal(err)
	}
	if rc, err = pub.EdVerify(msgEd, sigT2); err != nil {
		t.Fatal(err)
	}
	if rc {
		t.Fatal("Verify succeeded on bad signature")
	}
}

func TestEcDSA(t *testing.T) {
	// test simple sign/verify
	sigT, err := prv.EcSign(msgEc)
	if err != nil {
		t.Fatal(err)
	}
	rc, err := pub.EcVerify(msgEc, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed (1)")
	}

	// test if signatures are deterministic
	sigU, err := prv.EcSign(msgEc)
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(sigT.Bytes(), sigU.Bytes()) != 0 {
		t.Fatal("Signatures not deterministic")
	}

	// test serialization
	sigData := sigT.Bytes()
	sigT, err = NewEcSignatureFromBytes(sigData)
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(sigData, sigT.Bytes()) != 0 {
		t.Fatal("Signature serialization failed")
	}

	// test pre-set signature
	sigT, err = NewEcSignatureFromBytes(sigEc)
	if err != nil {
		t.Fatal(err)
	}
	rc, err = pub.EcVerify(msgEc, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if !rc {
		t.Fatal("Verify failed (2)")
	}

	// test failure.
	sigData[23] ^= 0xA5
	sigT, err = NewEcSignatureFromBytes(sigData)
	if err != nil {
		t.Fatal(err)
	}
	rc, err = pub.EcVerify(msgEc, sigT)
	if err != nil {
		t.Fatal(err)
	}
	if rc {
		t.Fatal("Verify succeeded on bad signature")
	}
}
